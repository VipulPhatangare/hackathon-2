<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Crowd Monitor â€” Live Dashboard</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    :root {
      --primary: #4361ee;
      --primary-light: #e0e7ff;
      --secondary: #3f37c9;
      --danger: #f72585;
      --danger-light: #fce4ec;
      --success: #4cc9f0;
      --success-light: #e0f7fa;
      --warning: #f8961e;
      --warning-light: #fff3e0;
      --dark: #212529;
      --light: #f8f9fa;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --low: #4cc9f0;
      --medium: #f8961e;
      --high: #f72585;
      --border-radius: 12px;
      --box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
      --transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body { 
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: #f8fafc; 
      color: var(--dark); 
      line-height: 1.6;
    }
    
    .dashboard {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1.5rem;
      padding: 1.5rem;
      max-width: 1800px;
      margin: 0 auto;
    }
    
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.25rem 2rem;
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      margin-bottom: 1rem;
    }
    
    .header h1 {
      font-size: 1.75rem;
      font-weight: 700;
      color: var(--primary);
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .header h1 i {
      color: var(--primary);
      font-size: 1.5rem;
    }
    
    .last-updated {
      background: var(--primary-light);
      color: var(--primary);
      padding: 0.5rem 1rem;
      border-radius: 50px;
      font-size: 0.85rem;
      font-weight: 500;
    }
    
    .card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      overflow: hidden;
      transition: var(--transition);
    }
    
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 35px rgba(0, 0, 0, 0.1);
    }
    
    .card-header {
      padding: 1.25rem 1.75rem;
      border-bottom: 1px solid var(--gray-light);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .card-header h3 {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--dark);
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }
    
    .card-header i {
      font-size: 1.1rem;
      color: var(--primary);
    }
    
    .card-body {
      padding: 1.75rem;
    }
    
    /* Tabs */
    .monitor-tabs {
      display: flex;
      border-bottom: 1px solid var(--gray-light);
      margin-bottom: 1.5rem;
      padding: 0 1.5rem;
    }
    
    .monitor-tab {
      padding: 0.85rem 1.5rem;
      cursor: pointer;
      border-bottom: 3px solid transparent;
      transition: var(--transition);
      font-weight: 500;
      color: var(--gray);
      position: relative;
      margin-bottom: -1px;
    }
    
    .monitor-tab.active {
      border-bottom-color: var(--primary);
      color: var(--primary);
      font-weight: 600;
    }
    
    .monitor-tab:hover:not(.active) {
      color: var(--dark);
      background: var(--primary-light);
    }
    
    .monitor-content {
      display: none;
    }
    
    .monitor-content.active {
      display: block;
    }
    
    /* Visualization Grid */
    .visualization-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
      gap: 1.75rem;
    }
    
    .visualization {
      position: relative;
      background: #edf2f7;
      border-radius: var(--border-radius);
      overflow: hidden;
      aspect-ratio: 16/9;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    
    .visualization img, 
    .visualization canvas,
    .visualization video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }
    
    /* Crowd Level Indicators */
    .crowd-level-container {
      display: flex;
      justify-content: space-between;
      margin-top: 1.5rem;
      background: var(--gray-light);
      border-radius: var(--border-radius);
      padding: 0.5rem;
    }
    
    .crowd-level-item {
      flex: 1;
      text-align: center;
      padding: 0.75rem;
      border-radius: calc(var(--border-radius) - 4px);
      transition: var(--transition);
    }
    
    .crowd-level-item.active {
      transform: translateY(-3px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .crowd-level-item.low {
      background: var(--success-light);
      color: var(--success);
    }
    
    .crowd-level-item.medium {
      background: var(--warning-light);
      color: var(--warning);
    }
    
    .crowd-level-item.high {
      background: var(--danger-light);
      color: var(--danger);
    }
    
    .crowd-level-item i {
      font-size: 1.5rem;
      margin-bottom: 0.5rem;
    }
    
    .crowd-level-item .label {
      font-size: 0.85rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
    }
    
    .crowd-level-item .value {
      font-size: 1.5rem;
      font-weight: 700;
      margin-top: 0.25rem;
    }
    
    /* Count Display */
    .count-display {
      text-align: center;
      padding: 2rem 1rem;
      position: relative;
    }
    
    .count-value {
      font-size: 5rem;
      font-weight: 800;
      color: var(--primary);
      line-height: 1;
      margin-bottom: 0.5rem;
      position: relative;
      display: inline-block;
    }
    
    .count-value::after {
      content: '';
      position: absolute;
      bottom: -10px;
      left: 50%;
      transform: translateX(-50%);
      width: 60px;
      height: 4px;
      background: var(--primary);
      border-radius: 2px;
    }
    
    .count-label {
      font-size: 1rem;
      color: var(--gray);
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-weight: 500;
    }
    
    /* Threshold Control */
    .threshold-control {
      padding: 1.5rem;
      background: var(--gray-light);
      border-radius: var(--border-radius);
      transition: var(--transition);
    }
    
    .threshold-control.disabled {
      opacity: 0.6;
      pointer-events: none;
      position: relative;
    }
    
    .threshold-control.disabled::after {
      content: 'Disabled for analysis';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(0,0,0,0.7);
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      font-size: 0.9rem;
      z-index: 10;
    }
    
    .threshold-control label {
      display: block;
      margin-bottom: 0.75rem;
      font-weight: 600;
      color: var(--dark);
    }
    
    .threshold-slider {
      width: 100%;
      height: 8px;
      -webkit-appearance: none;
      appearance: none;
      background: #d1d5db;
      border-radius: 4px;
      outline: none;
      margin: 1rem 0;
    }
    
    .threshold-slider::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      background: var(--primary);
      cursor: pointer;
      transition: var(--transition);
    }
    
    .threshold-slider::-webkit-slider-thumb:hover {
      transform: scale(1.1);
      box-shadow: 0 0 0 4px rgba(67, 97, 238, 0.2);
    }
    
    .threshold-labels {
      display: flex;
      justify-content: space-between;
      margin-top: -0.5rem;
    }
    
    .threshold-label {
      font-size: 0.85rem;
      color: var(--gray);
      font-weight: 500;
    }
    
    /* Alert Status */
    .alert-status {
      padding: 1.5rem;
      text-align: center;
      margin-top: 1.5rem;
      background: var(--gray-light);
      border-radius: var(--border-radius);
    }
    
    .status-indicator {
      display: inline-flex;
      align-items: center;
      gap: 0.75rem;
      padding: 0.85rem 1.5rem;
      border-radius: 50px;
      background: var(--success-light);
      color: #10b981;
      font-weight: 600;
      transition: var(--transition);
    }
    
    .status-indicator i {
      font-size: 1.25rem;
    }
    
    .status-indicator.warning {
      background: var(--warning-light);
      color: var(--warning);
    }
    
    .status-indicator.danger {
      background: var(--danger-light);
      color: var(--danger);
    }
    
    /* Upload Areas */
    .upload-area {
      border: 2px dashed #cbd5e0;
      border-radius: var(--border-radius);
      padding: 3rem 2rem;
      text-align: center;
      cursor: pointer;
      transition: var(--transition);
      background: white;
    }
    
    .upload-area:hover {
      border-color: var(--primary);
      background: var(--primary-light);
    }
    
    .upload-area i {
      font-size: 3rem;
      color: var(--primary);
      margin-bottom: 1rem;
    }
    
    .upload-area p {
      font-size: 1.1rem;
      color: var(--dark);
      margin-bottom: 0.5rem;
      font-weight: 500;
    }
    
    .upload-area .small {
      font-size: 0.85rem;
      color: var(--gray);
    }
    
    .upload-area input[type="file"] {
      display: none;
    }
    
    /* Loader */
    .loader {
      display: none;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(255,255,255,0.9);
      z-index: 10;
      justify-content: center;
      align-items: center;
      flex-direction: column;
      border-radius: var(--border-radius);
    }
    
    .loader.active {
      display: flex;
    }
    
    .loader-spinner {
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid var(--primary);
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 1.5rem;
    }
    
    .loader-text {
      color: var(--dark);
      font-weight: 600;
      font-size: 1.1rem;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Pulse Animation */
    @keyframes pulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.05); }
      100% { transform: scale(1); }
    }
    
    /* Alert Popup */
    .alert-popup {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: var(--danger);
      color: white;
      padding: 2rem 4rem;
      border-radius: var(--border-radius);
      font-size: 1.75rem;
      font-weight: 700;
      box-shadow: 0 20px 40px rgba(239, 68, 68, 0.3);
      z-index: 1000;
      display: none;
      animation: pulse 1.5s infinite;
      text-align: center;
      min-width: 400px;
    }
    
    .alert-popup i {
      display: block;
      font-size: 4rem;
      margin-bottom: 1.5rem;
    }
    
    /* Video Timeline */
    .video-timeline {
      margin-top: 1.5rem;
      background: var(--gray-light);
      border-radius: var(--border-radius);
      padding: 1rem;
    }
    
    .timeline-header {
      display: flex;
      justify-content: space-between;
      margin-bottom: 0.5rem;
    }
    
    .timeline-scrubber {
      width: 100%;
      height: 8px;
      background: #d1d5db;
      border-radius: 4px;
      position: relative;
      cursor: pointer;
    }
    
    .timeline-progress {
      height: 100%;
      background: var(--primary);
      border-radius: 4px;
      width: 0%;
    }
    
    .timeline-marker {
      position: absolute;
      top: -4px;
      width: 16px;
      height: 16px;
      background: var(--primary);
      border-radius: 50%;
      transform: translateX(-8px);
    }
    
    .timeline-counts {
      display: flex;
      margin-top: 0.5rem;
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }
    
    .count-marker {
      flex-shrink: 0;
      width: 40px;
      text-align: center;
      font-size: 0.75rem;
      color: var(--gray);
      position: relative;
    }
    
    .count-marker::after {
      content: '';
      position: absolute;
      bottom: 12px;
      left: 50%;
      width: 2px;
      height: 8px;
      background: var(--gray);
      transform: translateX(-1px);
    }
    
    .count-value {
      font-weight: 600;
      color: var(--dark);
    }
    
    .high-count {
      color: var(--danger);
    }
    
    .medium-count {
      color: var(--warning);
    }
    
    /* Responsive Adjustments */
    @media (max-width: 1200px) {
      .visualization-grid {
        grid-template-columns: 1fr;
      }
    }
    
    @media (max-width: 768px) {
      .dashboard {
        padding: 1rem;
      }
      
      .header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
        padding: 1.5rem;
      }
      
      .last-updated {
        width: 100%;
        text-align: center;
      }
      
      .count-value {
        font-size: 3.5rem;
      }
      
      .monitor-tabs {
        flex-wrap: wrap;
      }
      
      .monitor-tab {
        flex: 1;
        text-align: center;
        padding: 0.75rem;
      }
      
      .crowd-level-container {
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .alert-popup {
        min-width: 300px;
        font-size: 1.25rem;
        padding: 1.5rem 2rem;
      }
      
      .alert-popup i {
        font-size: 3rem;
      }
    }
  </style>
</head>
<body>
  <div class="dashboard">
    <header class="header">
      <h1><i class="fas fa-users"></i> Crowd Monitoring Dashboard</h1>
      <div class="last-updated" id="lastUpdated">Last updated: Just now</div>
    </header>
    
    <div class="card">
      <div class="monitor-tabs">
        <div class="monitor-tab active" data-tab="live">Live Feed</div>
        <div class="monitor-tab" data-tab="image">Image Analysis</div>
        <div class="monitor-tab" data-tab="video">Video Analysis</div>
      </div>
      
      <!-- Live Feed Content -->
      <div class="monitor-content active" id="liveContent">
        <div class="visualization-grid">
          <div class="card">
            <div class="card-header">
              <h3><i class="fas fa-video"></i> Live Camera Feed</h3>
            </div>
            <div class="card-body">
              <div class="visualization">
                <img id="liveFeed" alt="Live camera feed" />
                <div class="loader" id="liveLoader">
                  <div class="loader-spinner"></div>
                  <div class="loader-text">Processing live feed...</div>
                </div>
              </div>
              
              <!-- Crowd Level Indicators -->
              <div class="crowd-level-container" id="crowdLevelContainer">
                <div class="crowd-level-item low">
                  <i class="fas fa-user"></i>
                  <div class="label">Low</div>
                  <div class="value" id="lowCount">0</div>
                </div>
                <div class="crowd-level-item medium">
                  <i class="fas fa-users"></i>
                  <div class="label">Medium</div>
                  <div class="value" id="mediumCount">0</div>
                </div>
                <div class="crowd-level-item high">
                  <i class="fas fa-user-friends"></i>
                  <div class="label">High</div>
                  <div class="value" id="highCount">0</div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card">
            <div class="card-header">
              <h3><i class="fas fa-fire"></i> Density Heatmap</h3>
            </div>
            <div class="card-body">
              <div class="visualization">
                <canvas id="heatmapCanvas"></canvas>
                <div class="loader" id="heatmapLoader">
                  <div class="loader-spinner"></div>
                  <div class="loader-text">Generating heatmap...</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Image Analysis Content -->
      <div class="monitor-content" id="imageContent">
        <div class="card-body">
          <div class="upload-area" id="imageUploadArea">
            <i class="fas fa-cloud-upload-alt"></i>
            <p>Click to upload an image or drag and drop</p>
            <p class="small">Supports JPG, PNG (Max 5MB)</p>
            <input type="file" id="imageInput" accept="image/*">
          </div>
          
          <div class="visualization-grid" id="imageResults" style="display: none;">
            <div class="card">
              <div class="card-header">
                <h3><i class="fas fa-image"></i> Original Image</h3>
              </div>
              <div class="card-body">
                <div class="visualization">
                  <img id="originalImage" alt="Original image" />
                  <div class="loader" id="imageLoader">
                    <div class="loader-spinner"></div>
                    <div class="loader-text">Processing image...</div>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="card">
              <div class="card-header">
                <h3><i class="fas fa-project-diagram"></i> Analyzed Image</h3>
              </div>
              <div class="card-body">
                <div class="visualization">
                  <img id="analyzedImage" alt="Analyzed image" />
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Video Analysis Content -->
      <div class="monitor-content" id="videoContent">
        <div class="card-body">
          <div class="upload-area" id="videoUploadArea">
            <i class="fas fa-video"></i>
            <p>Click to upload a video or drag and drop</p>
            <p class="small">Supports MP4, WebM (Max 20MB)</p>
            <input type="file" id="videoInput" accept="video/*">
          </div>
          
          <div class="visualization-grid" id="videoResults" style="display: none;">
            <div class="card">
              <div class="card-header">
                <h3><i class="fas fa-video"></i> Processed Video</h3>
              </div>
              <div class="card-body">
                <div class="visualization">
                  <video id="processedVideo" controls></video>
                  <div class="loader" id="videoLoader">
                    <div class="loader-spinner"></div>
                    <div class="loader-text">Processing video...</div>
                  </div>
                </div>
                
                <div class="video-timeline">
                  <div class="timeline-header">
                    <span>Frame-by-frame analysis</span>
                    <span id="currentFrameInfo">Frame: 0/0 - Count: 0</span>
                  </div>
                  <div class="timeline-scrubber" id="timelineScrubber">
                    <div class="timeline-progress" id="timelineProgress"></div>
                    <div class="timeline-marker" id="timelineMarker"></div>
                  </div>
                  <div class="timeline-counts" id="timelineCounts"></div>
                </div>
              </div>
            </div>
            
            <div class="card">
              <div class="card-header">
                <h3><i class="fas fa-chart-line"></i> Crowd Count Over Time</h3>
              </div>
              <div class="card-body">
                <div class="visualization">
                  <canvas id="countChart"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Analytics Sidebar -->
    <div class="analytics-sidebar">
      <div class="card">
        <div class="card-header">
          <h3><i class="fas fa-chart-bar"></i> Crowd Analytics</h3>
        </div>
        <div class="card-body">
          <div class="count-display">
            <div class="count-value" id="countDisplay">0</div>
            <div class="count-label">Total People Detected</div>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-header">
          <h3><i class="fas fa-bell"></i> Alert Settings</h3>
        </div>
        <div class="card-body">
          <div class="threshold-control">
            <label for="thresholdSlider">Crowd Alert Threshold</label>
            <input type="range" min="1" max="50" value="15" class="threshold-slider" id="thresholdSlider">
            <div class="threshold-labels">
              <span class="threshold-label">Low</span>
              <span class="threshold-label">Medium</span>
              <span class="threshold-label">High</span>
            </div>
          </div>
          
          <div class="alert-status">
            <div class="status-indicator" id="alertStatus">
              <i class="fas fa-check-circle"></i>
              <span>No alerts</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Alert Popup -->
  <div id="alertPopup" class="alert-popup">
    <i class="fas fa-exclamation-triangle"></i>
    CROWD ALERT!<br>
    Threshold Exceeded
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // DOM Elements
      const liveFeed = document.getElementById('liveFeed');
      const heatmapCanvas = document.getElementById('heatmapCanvas');
      const heatmapCtx = heatmapCanvas.getContext('2d');
      const countDisplay = document.getElementById('countDisplay');
      const alertPopup = document.getElementById('alertPopup');
      const alertStatus = document.getElementById('alertStatus');
      const thresholdSlider = document.getElementById('thresholdSlider');
      const thresholdControl = document.querySelector('.threshold-control');
      const lastUpdatedEl = document.getElementById('lastUpdated');
      
      // Crowd level elements
      const crowdLevelContainer = document.getElementById('crowdLevelContainer');
      const lowCount = document.getElementById('lowCount');
      const mediumCount = document.getElementById('mediumCount');
      const highCount = document.getElementById('highCount');
      
      // Loaders
      const liveLoader = document.getElementById('liveLoader');
      const heatmapLoader = document.getElementById('heatmapLoader');
      const imageLoader = document.getElementById('imageLoader');
      const videoLoader = document.getElementById('videoLoader');
      
      // Socket.IO connection
      const socket = io();
      
      // Variables
      let currentThreshold = 15;
      let alertActive = false;
      let alertTimeout = null;
      let videoFrames = [];
      let frameCounts = [];
      let videoDuration = 0;
      let frameRate = 25;
      let countChart;
      
      // Initialize
      setupEventListeners();
      updateCrowdLevelIndicators(0);
      
      function setupEventListeners() {
        // Threshold slider
        thresholdSlider.addEventListener('input', updateThreshold);
        
        // Monitor tabs
        document.querySelectorAll('.monitor-tab').forEach(tab => {
          tab.addEventListener('click', switchMonitorTab);
        });
        
        // Image upload
        document.getElementById('imageUploadArea').addEventListener('click', () => {
          document.getElementById('imageInput').click();
        });
        document.getElementById('imageInput').addEventListener('change', handleImageUpload);
        
        // Video upload
        document.getElementById('videoUploadArea').addEventListener('click', () => {
          document.getElementById('videoInput').click();
        });
        document.getElementById('videoInput').addEventListener('change', handleVideoUpload);
        
        // Drag and drop setup
        setupDragAndDrop();
      }
      
      // Socket.IO Events
      socket.on('connect', () => {
        console.log('Connected to server with socket ID:', socket.id);
        liveLoader.classList.add('active');
        heatmapLoader.classList.add('active');
      });

      socket.on('prediction', (data) => {
        liveLoader.classList.remove('active');
        heatmapLoader.classList.remove('active');
        
        if (!data) return;
        
        // Update last updated time
        lastUpdatedEl.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;
        
        if (data.success) {
          if (data.annotatedImage) {
            liveFeed.src = 'data:image/png;base64,' + data.annotatedImage;
            liveFeed.onload = () => {
              if (data.predictions) {
                generateHeatmap(
                  data.predictions, 
                  liveFeed.naturalWidth, 
                  liveFeed.naturalHeight
                );
              }
            };
          }
          
          const count = data.count ?? 0;
          countDisplay.textContent = count;
          updateCrowdLevelIndicators(count);
          
          // Check threshold and show alert if needed
          if (count >= currentThreshold) {
            showAlert();
          } else if (alertActive) {
            hideAlert();
          }
        }
      });
      
      socket.on('testPrediction', (data) => {
        if (data && data.success) {
          if (data.testType === 'image') {
            imageLoader.classList.remove('active');
            // Original image is already shown
            document.getElementById('analyzedImage').src = 'data:image/png;base64,' + data.annotatedImage;
            
            // Update the count display
            countDisplay.textContent = data.count;
            updateCrowdLevelIndicators(data.count);
            
            // Disable alert settings
            thresholdSlider.disabled = true;
            thresholdControl.classList.add('disabled');
            
            showNotification(`Image analysis complete: ${data.count} people detected`);
          }
        } else {
          if (data.testType === 'image') {
            imageLoader.classList.remove('active');
          }
          showNotification('Analysis failed: ' + (data.error || 'Unknown error'), true);
        }
      });

      socket.on('videoProcessed', (data) => {
        if (data && data.success) {
          videoLoader.classList.remove('active');
          const video = document.getElementById('processedVideo');
          video.src = data.processedVideoUrl;
          
          // Initialize timeline and chart with the received frame counts
          frameCounts = data.frameCounts || [];
          initTimeline();
          initCountChart();
          
          // Disable alert settings for video analysis
          thresholdSlider.disabled = true;
          thresholdControl.classList.add('disabled');
          
          showNotification('Video processing complete');
        } else {
          videoLoader.classList.remove('active');
          showNotification('Video processing failed: ' + (data.error || 'Unknown error'), true);
        }
      });

      // Helper Functions
      function updateThreshold() {
        currentThreshold = parseInt(thresholdSlider.value);
        showNotification(`Alert threshold set to ${currentThreshold}`);
      }

      function showAlert() {
        if (alertActive) return;
        
        alertActive = true;
        alertPopup.style.display = 'block';
        alertStatus.innerHTML = '<i class="fas fa-exclamation-circle"></i><span>Alert active</span>';
        alertStatus.className = 'status-indicator danger';
        
        // Auto-hide after 5 seconds
        alertTimeout = setTimeout(() => {
          hideAlert();
        }, 5000);
      }

      function hideAlert() {
        alertActive = false;
        alertPopup.style.display = 'none';
        alertStatus.innerHTML = '<i class="fas fa-check-circle"></i><span>No alerts</span>';
        alertStatus.className = 'status-indicator';
        if (alertTimeout) {
          clearTimeout(alertTimeout);
          alertTimeout = null;
        }
      }

      function showNotification(message, isError = false) {
        // In a real app, you might implement toast notifications here
        console.log(isError ? 'Error:' : 'Notification:', message);
      }

      function generateHeatmap(predictions, width, height) {
        heatmapCanvas.width = width;
        heatmapCanvas.height = height;
        
        // Clear canvas
        heatmapCtx.clearRect(0, 0, width, height);
        
        // Draw semi-transparent background
        heatmapCtx.fillStyle = 'rgba(255, 255, 255, 0.2)';
        heatmapCtx.fillRect(0, 0, width, height);
        
        if (predictions.length === 0) return;
        
        // Create gradient for each prediction
        predictions.forEach(pred => {
          if (pred.x && pred.y) {
            const radius = Math.min(width, height) * 0.15;
            const grd = heatmapCtx.createRadialGradient(
              pred.x, pred.y, 0, 
              pred.x, pred.y, radius
            );
            
            grd.addColorStop(0, 'rgba(255, 50, 50, 0.8)');
            grd.addColorStop(0.7, 'rgba(255, 150, 50, 0.3)');
            grd.addColorStop(1, 'rgba(255, 255, 255, 0)');
            
            heatmapCtx.fillStyle = grd;
            heatmapCtx.beginPath();
            heatmapCtx.arc(pred.x, pred.y, radius, 0, Math.PI * 2);
            heatmapCtx.fill();
          }
        });
      }
      
      function updateCrowdLevelIndicators(count) {
        // Determine crowd levels
        const lowThreshold = Math.floor(currentThreshold * 0.5);
        const mediumThreshold = currentThreshold;
        const highThreshold = Math.floor(currentThreshold * 1.5);
        
        // Update indicator values
        lowCount.textContent = Math.min(count, lowThreshold);
        mediumCount.textContent = Math.min(Math.max(0, count - lowThreshold), mediumThreshold - lowThreshold);
        highCount.textContent = Math.max(0, count - mediumThreshold);
        
        // Highlight active level
        document.querySelectorAll('.crowd-level-item').forEach(item => {
          item.classList.remove('active');
        });
        
        if (count >= highThreshold) {
          document.querySelector('.crowd-level-item.high').classList.add('active');
        } else if (count >= mediumThreshold) {
          document.querySelector('.crowd-level-item.medium').classList.add('active');
        } else {
          document.querySelector('.crowd-level-item.low').classList.add('active');
        }
      }
      
      // Tab Switching
      function switchMonitorTab(e) {
        const tabId = e.currentTarget.getAttribute('data-tab');
        
        document.querySelectorAll('.monitor-tab').forEach(tab => {
          tab.classList.remove('active');
        });
        
        document.querySelectorAll('.monitor-content').forEach(content => {
          content.classList.remove('active');
        });
        
        e.currentTarget.classList.add('active');
        document.getElementById(`${tabId}Content`).classList.add('active');
        
        // Re-enable threshold controls when switching to live mode
        if (tabId === 'live') {
          thresholdSlider.disabled = false;
          thresholdControl.classList.remove('disabled');
        }
      }
      
      function handleImageUpload(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        if (!file.type.match('image.*')) {
          showNotification('Please select an image file', true);
          return;
        }
        
        if (file.size > 5 * 1024 * 1024) {
          showNotification('Image size must be less than 5MB', true);
          return;
        }
        
        const reader = new FileReader();
        reader.onload = (event) => {
          // Show the original image immediately
          document.getElementById('originalImage').src = event.target.result;
          document.getElementById('imageResults').style.display = 'grid';
          imageLoader.classList.add('active');
          
          // Convert to base64 and send to server
          const img = new Image();
          img.onload = function() {
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            
            const base64 = canvas.toDataURL('image/jpeg', 0.8).split(',')[1];
            
            // Send to server for testing
            socket.emit('testModel', {
              type: 'image',
              imageBase64: base64,
              originalImage: base64 // Send original for comparison
            });
          };
          img.src = event.target.result;
        };
        reader.readAsDataURL(file);
      }
      
      function handleVideoUpload(e) {
        const file = e.target.files[0];
        if (!file) return;
        
        if (!file.type.match('video.*')) {
          showNotification('Please select a video file', true);
          return;
        }
        
        if (file.size > 20 * 1024 * 1024) {
          showNotification('Video size must be less than 20MB', true);
          return;
        }
        
        videoLoader.classList.add('active');
        document.getElementById('videoResults').style.display = 'grid';
        
        // Create FormData and send to server
        const formData = new FormData();
        formData.append('video', file);
        
        fetch('/process-video', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // The server will handle the processing and emit 'videoProcessed' when done
            showNotification('Video upload successful, processing...');
          } else {
            videoLoader.classList.remove('active');
            showNotification('Video upload failed: ' + (data.error || 'Unknown error'), true);
          }
        })
        .catch(error => {
          videoLoader.classList.remove('active');
          showNotification('Video upload failed: ' + error.message, true);
        });
      }
      
      function initTimeline() {
        const scrubber = document.getElementById('timelineScrubber');
        const progress = document.getElementById('timelineProgress');
        const marker = document.getElementById('timelineMarker');
        const countsContainer = document.getElementById('timelineCounts');
        const frameInfo = document.getElementById('currentFrameInfo');
        const video = document.getElementById('processedVideo');
        
        // Populate timeline counts
        countsContainer.innerHTML = '';
        const frameStep = Math.max(1, Math.floor(frameCounts.length / 10));
        
        for (let i = 0; i < frameCounts.length; i += frameStep) {
          const count = frameCounts[i];
          const marker = document.createElement('div');
          marker.className = 'count-marker';
          marker.innerHTML = `
            <div class="count-value ${count >= currentThreshold * 1.5 ? 'high-count' : 
              count >= currentThreshold ? 'medium-count' : ''}">${count}</div>
            <div>${(i / frameRate).toFixed(1)}s</div>
          `;
          countsContainer.appendChild(marker);
        }
        
        // Update timeline during playback
        video.addEventListener('timeupdate', () => {
          const progressPercent = (video.currentTime / videoDuration) * 100;
          progress.style.width = `${progressPercent}%`;
          marker.style.left = `${progressPercent}%`;
          
          // Find current frame
          const currentFrame = Math.floor(video.currentTime * frameRate);
          const count = frameCounts[currentFrame] || 0;
          frameInfo.textContent = `Frame: ${currentFrame + 1}/${frameCounts.length} - Count: ${count}`;
          
          // Update count display
          countDisplay.textContent = count;
          updateCrowdLevelIndicators(count);
        });
        
        // Click to seek
        scrubber.addEventListener('click', (e) => {
          const rect = scrubber.getBoundingClientRect();
          const percent = (e.clientX - rect.left) / rect.width;
          video.currentTime = percent * videoDuration;
        });
      }
      
      function initCountChart() {
        const ctx = document.getElementById('countChart').getContext('2d');
        
        // Destroy previous chart if exists
        if (countChart) {
          countChart.destroy();
        }
        
        // Prepare data for chart
        const labels = Array.from({length: frameCounts.length}, (_, i) => (i / frameRate).toFixed(1) + 's');
        const thresholdLine = Array(frameCounts.length).fill(currentThreshold);
        
        countChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [
              {
                label: 'People Count',
                data: frameCounts,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                fill: false
              },
              {
                label: 'Alert Threshold',
                data: thresholdLine,
                borderColor: 'rgb(255, 99, 132)',
                borderDash: [5, 5],
                fill: false
              }
            ]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                title: {
                  display: true,
                  text: 'People Count'
                }
              },
              x: {
                title: {
                  display: true,
                  text: 'Time (seconds)'
                }
              }
            }
          }
        });
      }

      // Drag and Drop Setup
      function setupDragAndDrop() {
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
          document.getElementById('imageUploadArea').addEventListener(eventName, preventDefaults, false);
          document.getElementById('videoUploadArea').addEventListener(eventName, preventDefaults, false);
        });
        
        ['dragenter', 'dragover'].forEach(eventName => {
          document.getElementById('imageUploadArea').addEventListener(eventName, () => {
            document.getElementById('imageUploadArea').style.borderColor = 'var(--primary)';
            document.getElementById('imageUploadArea').style.backgroundColor = 'var(--primary-light)';
          }, false);
          
          document.getElementById('videoUploadArea').addEventListener(eventName, () => {
            document.getElementById('videoUploadArea').style.borderColor = 'var(--primary)';
            document.getElementById('videoUploadArea').style.backgroundColor = 'var(--primary-light)';
          }, false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
          document.getElementById('imageUploadArea').addEventListener(eventName, () => {
            document.getElementById('imageUploadArea').style.borderColor = '#cbd5e0';
            document.getElementById('imageUploadArea').style.backgroundColor = '';
          }, false);
          
          document.getElementById('videoUploadArea').addEventListener(eventName, () => {
            document.getElementById('videoUploadArea').style.borderColor = '#cbd5e0';
            document.getElementById('videoUploadArea').style.backgroundColor = '';
          }, false);
        });
        
        document.getElementById('imageUploadArea').addEventListener('drop', (e) => {
          const dt = e.dataTransfer;
          const file = dt.files[0];
          
          if (file && file.type.match('image.*')) {
            const input = document.getElementById('imageInput');
            input.files = dt.files;
            handleImageUpload({ target: { files: [file] } });
          }
        }, false);
        
        document.getElementById('videoUploadArea').addEventListener('drop', (e) => {
          const dt = e.dataTransfer;
          const file = dt.files[0];
          
          if (file && file.type.match('video.*')) {
            const input = document.getElementById('videoInput');
            input.files = dt.files;
            handleVideoUpload({ target: { files: [file] } });
          }
        }, false);
      }
      
      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    });
  </script>
</body>
</html>